// src/modals/UnitmanagementModal.jsx
import React, { useState } from 'react';
import { Plus, Edit2, Trash2, Home, DollarSign, Maximize2, User, Calendar, Phone, Mail } from 'lucide-react';

// Main Modal for Adding Units - Renamed to avoid conflict
const AddUnitsModal = ({ propertyId, onClose, onUnitsAdded }) => {
  const [units, setUnits] = useState([{
    unitNumber: '',
    floor: '',
    bedrooms: 1,
    bathrooms: 1,
    area: '',
    rent: '',
    deposit: '',
    furnished: false,
    features: []
  }]);
  const [loading, setLoading] = useState(false);

  const addUnitRow = () => {
    setUnits([...units, {
      unitNumber: '',
      floor: '',
      bedrooms: 1,
      bathrooms: 1,
      area: '',
      rent: '',
      deposit: '',
      furnished: false,
      features: []
    }]);
  };

  const removeUnitRow = (index) => {
    setUnits(units.filter((_, i) => i !== index));
  };

  const updateUnit = (index, field, value) => {
    const newUnits = [...units];
    newUnits[index][field] = value;
    setUnits(newUnits);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`http://localhost:5000/api/properties/${propertyId}/units`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ units })
      });

      if (!response.ok) {
        throw new Error('Failed to add units');
      }

      const result = await response.json();
      alert(`${result.data.addedUnits} units added successfully!`);
      onUnitsAdded();
      onClose();
    } catch (error) {
      console.error('Error adding units:', error);
      alert('Failed to add units');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg max-w-6xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6 border-b sticky top-0 bg-white z-10">
          <h2 className="text-2xl font-bold text-gray-900">Add Units to Property</h2>
          <p className="text-gray-600 mt-1">Define individual units for this property</p>
        </div>

        <form onSubmit={handleSubmit} className="p-6">
          <div className="space-y-4">
            {units.map((unit, index) => (
              <div key={index} className="border border-gray-200 rounded-lg p-4 bg-gray-50">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="font-semibold text-gray-900">Unit #{index + 1}</h3>
                  {units.length > 1 && (
                    <button
                      type="button"
                      onClick={() => removeUnitRow(index)}
                      className="text-red-600 hover:text-red-800"
                    >
                      <Trash2 className="w-5 h-5" />
                    </button>
                  )}
                </div>

                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Unit Number *
                    </label>
                    <input
                      type="text"
                      required
                      value={unit.unitNumber}
                      onChange={(e) => updateUnit(index, 'unitNumber', e.target.value)}
                      placeholder="e.g., 2F, A101"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Floor
                    </label>
                    <input
                      type="number"
                      value={unit.floor}
                      onChange={(e) => updateUnit(index, 'floor', parseInt(e.target.value))}
                      placeholder="Floor number"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Bedrooms *
                    </label>
                    <input
                      type="number"
                      required
                      min="0"
                      value={unit.bedrooms}
                      onChange={(e) => updateUnit(index, 'bedrooms', parseInt(e.target.value))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Bathrooms *
                    </label>
                    <input
                      type="number"
                      required
                      min="0"
                      value={unit.bathrooms}
                      onChange={(e) => updateUnit(index, 'bathrooms', parseInt(e.target.value))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Area (sq ft) *
                    </label>
                    <input
                      type="number"
                      required
                      min="1"
                      value={unit.area}
                      onChange={(e) => updateUnit(index, 'area', parseFloat(e.target.value))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Monthly Rent *
                    </label>
                    <input
                      type="number"
                      required
                      min="0"
                      value={unit.rent}
                      onChange={(e) => updateUnit(index, 'rent', parseFloat(e.target.value))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Deposit
                    </label>
                    <input
                      type="number"
                      min="0"
                      value={unit.deposit}
                      onChange={(e) => updateUnit(index, 'deposit', parseFloat(e.target.value))}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md"
                    />
                  </div>

                  <div className="flex items-center">
                    <label className="flex items-center space-x-2 cursor-pointer">
                      <input
                        type="checkbox"
                        checked={unit.furnished}
                        onChange={(e) => updateUnit(index, 'furnished', e.target.checked)}
                        className="w-4 h-4 text-blue-600"
                      />
                      <span className="text-sm text-gray-700">Furnished</span>
                    </label>
                  </div>
                </div>
              </div>
            ))}
          </div>

          <button
            type="button"
            onClick={addUnitRow}
            className="mt-4 flex items-center space-x-2 text-blue-600 hover:text-blue-800"
          >
            <Plus className="w-5 h-5" />
            <span>Add Another Unit</span>
          </button>

          <div className="flex justify-end space-x-3 mt-6 pt-6 border-t">
            <button
              type="button"
              onClick={onClose}
              className="px-6 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={loading}
              className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400"
            >
              {loading ? 'Adding...' : `Add ${units.length} Unit${units.length > 1 ? 's' : ''}`}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

// Edit Unit Modal Component
const EditUnitModal = ({ unit, onClose, onUpdate }) => {
  const [formData, setFormData] = useState({
    unitNumber: unit.unitNumber,
    floor: unit.floor,
    bedrooms: unit.bedrooms,
    bathrooms: unit.bathrooms,
    area: unit.area,
    rent: unit.rent,
    deposit: unit.deposit,
    furnished: unit.furnished,
    features: unit.features || []
  });
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`http://localhost:5000/api/properties/${unit.propertyId}/units/${unit._id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(formData)
      });

      if (!response.ok) throw new Error('Failed to update unit');

      alert('Unit updated successfully!');
      onUpdate();
      onClose();
    } catch (error) {
      console.error('Error updating unit:', error);
      alert('Failed to update unit');
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg max-w-2xl w-full">
        <div className="p-6 border-b">
          <h2 className="text-2xl font-bold text-gray-900">Edit Unit {unit.unitNumber}</h2>
        </div>

        <form onSubmit={handleSubmit} className="p-6">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Unit Number *
              </label>
              <input
                type="text"
                required
                value={formData.unitNumber}
                onChange={(e) => handleChange('unitNumber', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Floor
              </label>
              <input
                type="number"
                value={formData.floor}
                onChange={(e) => handleChange('floor', parseInt(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Bedrooms *
              </label>
              <input
                type="number"
                required
                min="0"
                value={formData.bedrooms}
                onChange={(e) => handleChange('bedrooms', parseInt(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Bathrooms *
              </label>
              <input
                type="number"
                required
                min="0"
                value={formData.bathrooms}
                onChange={(e) => handleChange('bathrooms', parseInt(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Area (sq ft) *
              </label>
              <input
                type="number"
                required
                min="1"
                value={formData.area}
                onChange={(e) => handleChange('area', parseFloat(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Monthly Rent *
              </label>
              <input
                type="number"
                required
                min="0"
                value={formData.rent}
                onChange={(e) => handleChange('rent', parseFloat(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Deposit
              </label>
              <input
                type="number"
                min="0"
                value={formData.deposit}
                onChange={(e) => handleChange('deposit', parseFloat(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md"
              />
            </div>

            <div className="flex items-center">
              <label className="flex items-center space-x-2 cursor-pointer">
                <input
                  type="checkbox"
                  checked={formData.furnished}
                  onChange={(e) => handleChange('furnished', e.target.checked)}
                  className="w-4 h-4 text-blue-600"
                />
                <span className="text-sm text-gray-700">Furnished</span>
              </label>
            </div>
          </div>

          <div className="flex justify-end space-x-3 mt-6 pt-6 border-t">
            <button
              type="button"
              onClick={onClose}
              className="px-6 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={loading}
              className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400"
            >
              {loading ? 'Updating...' : 'Update Unit'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

// Occupy Unit Modal Component
const OccupyUnitModal = ({ unit, onClose, onSuccess }) => {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    leaseStart: '',
    leaseEnd: '',
    rentAmount: unit.rent,
    depositAmount: unit.deposit || unit.rent,
    emergencyContact: '',
    notes: ''
  });
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`http://localhost:5000/api/properties/${unit.propertyId}/units/${unit._id}/occupy`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(formData)
      });

      if (!response.ok) throw new Error('Failed to occupy unit');

      alert('Unit occupied successfully!');
      onSuccess();
      onClose();
    } catch (error) {
      console.error('Error occupying unit:', error);
      alert('Failed to occupy unit');
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6 border-b">
          <h2 className="text-2xl font-bold text-gray-900">Occupy Unit {unit.unitNumber}</h2>
          <p className="text-gray-600 mt-1">Add tenant information and lease details</p>
        </div>

        <form onSubmit={handleSubmit} className="p-6">
          <div className="space-y-6">
            {/* Tenant Information */}
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Tenant Information</h3>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    First Name *
                  </label>
                  <input
                    type="text"
                    required
                    value={formData.firstName}
                    onChange={(e) => handleChange('firstName', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Last Name *
                  </label>
                  <input
                    type="text"
                    required
                    value={formData.lastName}
                    onChange={(e) => handleChange('lastName', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Email *
                  </label>
                  <input
                    type="email"
                    required
                    value={formData.email}
                    onChange={(e) => handleChange('email', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Phone *
                  </label>
                  <input
                    type="tel"
                    required
                    value={formData.phone}
                    onChange={(e) => handleChange('phone', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  />
                </div>
              </div>
            </div>

            {/* Lease Details */}
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Lease Details</h3>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Lease Start *
                  </label>
                  <input
                    type="date"
                    required
                    value={formData.leaseStart}
                    onChange={(e) => handleChange('leaseStart', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Lease End *
                  </label>
                  <input
                    type="date"
                    required
                    value={formData.leaseEnd}
                    onChange={(e) => handleChange('leaseEnd', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Monthly Rent *
                  </label>
                  <input
                    type="number"
                    required
                    min="0"
                    value={formData.rentAmount}
                    onChange={(e) => handleChange('rentAmount', parseFloat(e.target.value))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Security Deposit
                  </label>
                  <input
                    type="number"
                    min="0"
                    value={formData.depositAmount}
                    onChange={(e) => handleChange('depositAmount', parseFloat(e.target.value))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  />
                </div>
              </div>
            </div>

            {/* Additional Information */}
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Additional Information</h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Emergency Contact
                  </label>
                  <input
                    type="text"
                    value={formData.emergencyContact}
                    onChange={(e) => handleChange('emergencyContact', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Notes
                  </label>
                  <textarea
                    value={formData.notes}
                    onChange={(e) => handleChange('notes', e.target.value)}
                    rows="3"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  />
                </div>
              </div>
            </div>
          </div>

          <div className="flex justify-end space-x-3 mt-6 pt-6 border-t">
            <button
              type="button"
              onClick={onClose}
              className="px-6 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={loading}
              className="px-6 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:bg-gray-400"
            >
              {loading ? 'Occupying...' : 'Occupy Unit'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

const UnitCard = ({ unit, onEdit, onOccupy, onVacate, onDelete }) => {
  const getStatusColor = (status) => {
    switch (status) {
      case 'available': return 'bg-green-100 text-green-800';
      case 'occupied': return 'bg-red-100 text-red-800';
      case 'maintenance': return 'bg-yellow-100 text-yellow-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(amount);
  };

  return (
    <div className="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow bg-white">
      <div className="flex justify-between items-start mb-3">
        <div>
          <h3 className="font-bold text-lg text-gray-900">{unit.unitNumber}</h3>
          {unit.floor && <p className="text-sm text-gray-600">Floor {unit.floor}</p>}
        </div>
        <span className={`px-3 py-1 rounded-full text-xs font-semibold ${getStatusColor(unit.availability)}`}>
          {unit.availability}
        </span>
      </div>

      <div className="grid grid-cols-2 gap-3 mb-4 text-sm">
        <div className="flex items-center space-x-2">
          <Home className="w-4 h-4 text-gray-500" />
          <span>{unit.bedrooms} BR, {unit.bathrooms} BA</span>
        </div>
        <div className="flex items-center space-x-2">
          <Maximize2 className="w-4 h-4 text-gray-500" />
          <span>{unit.area} sq ft</span>
        </div>
        <div className="flex items-center space-x-2">
          <DollarSign className="w-4 h-4 text-gray-500" />
          <span className="font-semibold">{formatCurrency(unit.rent)}/mo</span>
        </div>
        {unit.furnished && (
          <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">Furnished</span>
        )}
      </div>

      {unit.tenant && (
        <div className="mb-3 p-2 bg-gray-50 rounded text-sm">
          <div className="flex items-center space-x-2 mb-1">
            <User className="w-4 h-4 text-gray-500" />
            <p className="font-medium">{unit.tenant.firstName} {unit.tenant.lastName}</p>
          </div>
          <div className="flex items-center space-x-2 text-xs text-gray-600">
            <Phone className="w-3 h-3" />
            <span>{unit.tenant.phone}</span>
          </div>
          <div className="flex items-center space-x-2 text-xs text-gray-600 mt-1">
            <Calendar className="w-3 h-3" />
            <span>Lease: {new Date(unit.leaseStart).toLocaleDateString()} - {new Date(unit.leaseEnd).toLocaleDateString()}</span>
          </div>
        </div>
      )}

      <div className="flex space-x-2">
        <button
          onClick={() => onEdit(unit)}
          className="flex-1 px-3 py-2 text-sm border border-gray-300 rounded hover:bg-gray-50 flex items-center justify-center"
        >
          <Edit2 className="w-4 h-4 mr-1" />
          Edit
        </button>
        
        {unit.availability === 'available' ? (
          <button
            onClick={() => onOccupy(unit)}
            className="flex-1 px-3 py-2 text-sm bg-green-600 text-white rounded hover:bg-green-700"
          >
            Occupy
          </button>
        ) : unit.availability === 'occupied' ? (
          <button
            onClick={() => onVacate(unit)}
            className="flex-1 px-3 py-2 text-sm bg-yellow-600 text-white rounded hover:bg-yellow-700"
          >
            Vacate
          </button>
        ) : null}
        
        <button
          onClick={() => onDelete(unit)}
          className="px-3 py-2 text-sm text-red-600 border border-red-300 rounded hover:bg-red-50 flex items-center justify-center"
        >
          <Trash2 className="w-4 h-4" />
        </button>
      </div>
    </div>
  );
};

// Main Dashboard Component - This is the default export
export default function UnitManagementModal({ propertyId, property }) {
  const [showAddModal, setShowAddModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showOccupyModal, setShowOccupyModal] = useState(false);
  const [selectedUnit, setSelectedUnit] = useState(null);
  const [units, setUnits] = useState([]);
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(true);

  React.useEffect(() => {
    fetchUnits();
  }, [propertyId]);

  const fetchUnits = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem('token');
      const response = await fetch(`http://localhost:5000/api/properties/${propertyId}/units`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      const data = await response.json();
      if (data.status === 'success') {
        setUnits(data.data.units);
        setStats(data.data.stats);
      }
    } catch (error) {
      console.error('Error fetching units:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleEdit = (unit) => {
    setSelectedUnit(unit);
    setShowEditModal(true);
  };

  const handleOccupy = (unit) => {
    setSelectedUnit(unit);
    setShowOccupyModal(true);
  };

  const handleVacate = async (unit) => {
    if (window.confirm(`Are you sure you want to mark unit ${unit.unitNumber} as vacant? This will end the current lease.`)) {
      try {
        const token = localStorage.getItem('token');
        const response = await fetch(`http://localhost:5000/api/properties/${propertyId}/units/${unit._id}/vacate`, {
          method: 'PATCH',
          headers: { 'Authorization': `Bearer ${token}` }
        });

        if (!response.ok) throw new Error('Failed to vacate unit');

        alert('Unit marked as vacant successfully!');
        fetchUnits();
      } catch (error) {
        console.error('Error vacating unit:', error);
        alert('Failed to vacate unit');
      }
    }
  };

  const handleDelete = async (unit) => {
    if (window.confirm(`Are you sure you want to delete unit ${unit.unitNumber}? This action cannot be undone.`)) {
      try {
        const token = localStorage.getItem('token');
        const response = await fetch(`http://localhost:5000/api/properties/${propertyId}/units/${unit._id}`, {
          method: 'DELETE',
          headers: { 'Authorization': `Bearer ${token}` }
        });

        if (!response.ok) throw new Error('Failed to delete unit');

        alert('Unit deleted successfully!');
        fetchUnits();
      } catch (error) {
        console.error('Error deleting unit:', error);
        alert('Failed to delete unit');
      }
    }
  };

  if (loading) {
    return (
      <div className="text-center py-8">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
        <p className="text-gray-600 mt-4">Loading units...</p>
      </div>
    );
  }

  if (!property?.hasUnits) {
    return (
      <div className="text-center py-12">
        <Home className="w-16 h-16 text-gray-400 mx-auto mb-4" />
        <h3 className="text-xl font-semibold text-gray-900 mb-2">No Units Yet</h3>
        <p className="text-gray-600 mb-6">Add units to this property to manage them individually</p>
        <button
          onClick={() => setShowAddModal(true)}
          className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2 mx-auto"
        >
          <Plus className="w-5 h-5" />
          <span>Add Units</span>
        </button>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Statistics */}
      {stats && (
        <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
          <div className="bg-blue-50 p-4 rounded-lg">
            <p className="text-sm text-gray-600">Total Units</p>
            <p className="text-2xl font-bold text-blue-600">{stats.totalUnits}</p>
          </div>
          <div className="bg-green-50 p-4 rounded-lg">
            <p className="text-sm text-gray-600">Available</p>
            <p className="text-2xl font-bold text-green-600">{stats.available}</p>
          </div>
          <div className="bg-red-50 p-4 rounded-lg">
            <p className="text-sm text-gray-600">Occupied</p>
            <p className="text-2xl font-bold text-red-600">{stats.occupied}</p>
          </div>
          <div className="bg-yellow-50 p-4 rounded-lg">
            <p className="text-sm text-gray-600">Occupancy Rate</p>
            <p className="text-2xl font-bold text-yellow-600">
              {stats.totalUnits > 0 ? ((stats.occupied / stats.totalUnits) * 100).toFixed(0) : 0}%
            </p>
          </div>
          <div className="bg-purple-50 p-4 rounded-lg">
            <p className="text-sm text-gray-600">Monthly Income</p>
            <p className="text-2xl font-bold text-purple-600">
              {new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD'
              }).format(stats.currentMonthlyIncome || 0)}
            </p>
          </div>
        </div>
      )}

      {/* Add Units Button */}
      <div className="flex justify-between items-center">
        <h2 className="text-xl font-bold text-gray-900">Units ({units.length})</h2>
        <button
          onClick={() => setShowAddModal(true)}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2"
        >
          <Plus className="w-5 h-5" />
          <span>Add More Units</span>
        </button>
      </div>

      {/* Units Grid */}
      {units.length === 0 ? (
        <div className="text-center py-12 border-2 border-dashed border-gray-300 rounded-lg">
          <Home className="w-12 h-12 text-gray-400 mx-auto mb-3" />
          <h3 className="text-lg font-semibold text-gray-900 mb-2">No Units Added</h3>
          <p className="text-gray-600 mb-4">Get started by adding your first unit</p>
          <button
            onClick={() => setShowAddModal(true)}
            className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            Add First Unit
          </button>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {units.map((unit) => (
            <UnitCard
              key={unit._id}
              unit={unit}
              onEdit={handleEdit}
              onOccupy={handleOccupy}
              onVacate={handleVacate}
              onDelete={handleDelete}
            />
          ))}
        </div>
      )}

      {/* Add Units Modal - Now using AddUnitsModal instead of UnitManagementModal */}
      {showAddModal && (
        <AddUnitsModal
          propertyId={propertyId}
          onClose={() => setShowAddModal(false)}
          onUnitsAdded={fetchUnits}
        />
      )}

      {/* Edit Unit Modal */}
      {showEditModal && selectedUnit && (
        <EditUnitModal
          unit={selectedUnit}
          onClose={() => setShowEditModal(false)}
          onUpdate={fetchUnits}
        />
      )}

      {/* Occupy Unit Modal */}
      {showOccupyModal && selectedUnit && (
        <OccupyUnitModal
          unit={selectedUnit}
          onClose={() => setShowOccupyModal(false)}
          onSuccess={fetchUnits}
        />
      )}
    </div>
  );
}

// Export all components for individual use
export { AddUnitsModal, EditUnitModal, OccupyUnitModal, UnitCard };


      {/* Header with Add Button */}
      <div className="flex justify-between items-center">
        <h2 className="text-xl font-bold text-gray-900">
          Units ({units.length})
        </h2>
        <button
          onClick={() => setShowAddModal(true)}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2"
        >
          <Plus className="w-5 h-5" />
          <span>{units.length === 0 ? 'Add Units' : 'Add More Units'}</span>
        </button>
      </div>

      {/* Units Grid - Single empty state */}
      {units.length === 0 ? (
        <div className="text-center py-12 border-2 border-dashed border-gray-300 rounded-lg">
          <Home className="w-12 h-12 text-gray-400 mx-auto mb-3" />
          <h3 className="text-lg font-semibold text-gray-900 mb-2">No Units Added</h3>
          <p className="text-gray-600 mb-4">Get started by adding your first unit</p>
          <button
            onClick={() => setShowAddModal(true)}
            className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            Add First Unit
          </button>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {units.map((unit) => (
            <UnitCard
              key={unit._id}
              unit={unit}
              onEdit={handleEdit}
              onOccupy={handleOccupy}
              onVacate={handleVacate}
              onDelete={handleDelete}
            />
          ))}
        </div>
      )}

      {/* Modals */}
      {showAddModal && (
        <AddUnitsModal
          propertyId={propertyId}
          onClose={() => setShowAddModal(false)}
          onUnitsAdded={fetchUnits}
        />
      )}

      {showEditModal && selectedUnit && (
        <EditUnitModal
          unit={selectedUnit}
          onClose={() => setShowEditModal(false)}
          onUpdate={fetchUnits}
        />
      )}

      {showOccupyModal && selectedUnit && (
        <OccupyUnitModal
          unit={selectedUnit}
          onClose={() => setShowOccupyModal(false)}
          onSuccess={fetchUnits}
        />
      )}